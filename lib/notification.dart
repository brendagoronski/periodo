// lib/notification.dart
// ------------------------------------------------------------
// M√≥dulo respons√°vel por gerenciar TODA a l√≥gica de notifica√ß√µes
// locais do aplicativo (Android/iOS/desktop onde aplic√°vel).
// Aqui centralizamos:
// - inicializa√ß√£o do plugin de notifica√ß√µes
// - pedido de permiss√µes
// - agendamento de lembretes (1 dia antes, no dia, f√©rtil, ovula√ß√£o, atraso)
// - envio de notifica√ß√µes imediatas para feedback
// - cancelamento de todas as notifica√ß√µes
// ------------------------------------------------------------
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:flutter/material.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;

class PeriodNotification {
  // singleton simples
  static final PeriodNotification _instance = PeriodNotification._internal();
  factory PeriodNotification() => _instance;
  PeriodNotification._internal();

  final FlutterLocalNotificationsPlugin _plugin = FlutterLocalNotificationsPlugin();
  bool _initialized = false;

  /// Inicializa o plugin (idempotente) e pede permiss√µes (Android 13+ / iOS).
  Future<void> initNotifications() async {
    if (_initialized) return;

        try {
      // Inicializar timezone
      tz.initializeTimeZones();

      // Mantive uma inicializa√ß√£o simples (usa o √≠cone @mipmap/ic_launcher como voc√™ tinha).
      const AndroidInitializationSettings androidInitializationSettings =
          AndroidInitializationSettings('@mipmap/ic_launcher');

      // se quiser suportar iOS com mais detalhes, podemos adicionar DarwinInitializationSettings.
      const InitializationSettings initializationSettings =
          InitializationSettings(android: androidInitializationSettings);

      try {
        await _plugin.initialize(initializationSettings);
      } catch (e) {
        debugPrint('Erro ao inicializar flutter_local_notifications: $e');
      }

      // Pedir permiss√£o (Android 13+) e iOS (se dispon√≠vel)
      try {
        if (Platform.isAndroid) {
          final androidImpl =
              _plugin.resolvePlatformSpecificImplementation<AndroidFlutterLocalNotificationsPlugin>();
          await androidImpl?.requestNotificationsPermission();
        } else if (Platform.isIOS) {
          final iosImpl =
              _plugin.resolvePlatformSpecificImplementation<IOSFlutterLocalNotificationsPlugin>();
          await iosImpl?.requestPermissions(alert: true, badge: true, sound: true);
        }
      } catch (e) {
        debugPrint('Erro ao pedir permiss√£o para notifica√ß√µes: $e');
      }

      _initialized = true;
    } catch (e) {
      debugPrint('‚ùå Erro cr√≠tico na inicializa√ß√£o: $e');
      _initialized = false;
    }
  }

  /// Mostra uma notifica√ß√£o imediata (para demonstra√ß√£o).
  Future<void> showNotification(int daysLeft) async {
    await initNotifications(); // garante inicializa√ß√£o e permiss√µes

    final title = 'Lembrete do ciclo';
    final body = daysLeft > 0
        ? 'Faltam $daysLeft dias para sua menstrua√ß√£o'
        : 'Sua menstrua√ß√£o pode ter come√ßado';

    // No Windows, apenas mostrar no console
    if (Platform.isWindows) {
      debugPrint('üîî NOTIFICA√á√ÉO: $title - $body');
      return;
    }

    final androidDetails = AndroidNotificationDetails(
      'period_channel', // id do canal
      'Per√≠odo', // nome vis√≠vel
      channelDescription: 'Notifica√ß√µes de ciclo menstrual',
      importance: Importance.max,
      priority: Priority.high,
      playSound: true,
    );

    final platformDetails = NotificationDetails(android: androidDetails);

    try {
      await _plugin.show(0, title, body, platformDetails);
    } catch (e) {
      debugPrint('Erro ao exibir notifica√ß√£o: $e');
    }
  }

  /// Calcula dias restantes considerando ciclo fixo (padr√£o 28 dias).
  int calcularDiasParaProximaMenstruacao(DateTime dataUltimaMenstruacao,
      {int cicloDias = 28}) {
    final ultima = DateTime(
        dataUltimaMenstruacao.year, dataUltimaMenstruacao.month, dataUltimaMenstruacao.day);
    final proximaMenstruacao = ultima.add(Duration(days: cicloDias));
    final hoje = DateTime.now();
    final hojeNormalizado = DateTime(hoje.year, hoje.month, hoje.day);
    final diasRestantes = proximaMenstruacao.difference(hojeNormalizado).inDays;
    return diasRestantes > 0 ? diasRestantes : 0;
  }

  /// Cancela todas as notifica√ß√µes programadas
  Future<void> cancelAllNotifications() async {
    await initNotifications(); // Garante inicializa√ß√£o
    try {
      await _plugin.cancelAll();
      debugPrint('‚úÖ Todas as notifica√ß√µes canceladas');
    } catch (e) {
      debugPrint('‚ùå Erro ao cancelar notifica√ß√µes: $e');
    }
  }

  /// Programa notifica√ß√µes para o pr√≥ximo per√≠odo
  Future<void> scheduleNotifications(DateTime dataUltimaMenstruacao, {int cicloDias = 28}) async {
    await initNotifications();
    
    try {
      await cancelAllNotifications();
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erro ao cancelar notifica√ß√µes anteriores: $e');
    }

    final proximaMenstruacao = dataUltimaMenstruacao.add(Duration(days: cicloDias));
    final hoje = DateTime.now();

    // Notifica√ß√£o 3 dias antes (mantida)
    final tresDiasAntes = proximaMenstruacao.subtract(const Duration(days: 3));
    if (tresDiasAntes.isAfter(hoje)) {
      await _scheduleNotification(
        1,
        'Lembrete do Ciclo',
        'Sua menstrua√ß√£o pode come√ßar em 3 dias. Prepare-se!',
        tresDiasAntes,
      );
    }

    // Notifica√ß√£o 1 dia antes √†s 18:00 com mensagem personalizada
    final umDiaAntes = proximaMenstruacao.subtract(const Duration(days: 1));
    final umDiaAntesAs18 = DateTime(
      umDiaAntes.year,
      umDiaAntes.month,
      umDiaAntes.day,
      18,
      0,
    );
    if (umDiaAntesAs18.isAfter(hoje)) {
      await _scheduleNotification(
        2,
        'Lembrete do Ciclo',
        'oii diva, se prepara que amanh√£ vem',
        umDiaAntesAs18,
      );
    }

    // Per√≠odo f√©rtil e ovula√ß√£o
    final ovulacao = proximaMenstruacao.subtract(const Duration(days: 14));
    final inicioFertil = ovulacao.subtract(const Duration(days: 3));

    // In√≠cio do per√≠odo f√©rtil √†s 09:00
    final inicioFertilAs09 = DateTime(
      inicioFertil.year,
      inicioFertil.month,
      inicioFertil.day,
      9,
      0,
    );
    if (inicioFertilAs09.isAfter(hoje)) {
      await _scheduleNotification(
        4,
        'Per√≠odo f√©rtil',
        'olha o nen√©m',
        inicioFertilAs09,
      );
    }

    // Dia da ovula√ß√£o √†s 09:00
    final ovulacaoAs09 = DateTime(
      ovulacao.year,
      ovulacao.month,
      ovulacao.day,
      9,
      0,
    );
    if (ovulacaoAs09.isAfter(hoje)) {
      await _scheduleNotification(
        5,
        'Ovula√ß√£o',
        'Hoje √© o dia da ovula√ß√£o.',
        ovulacaoAs09,
      );
    }

    // Notifica√ß√£o no dia √†s 09:00
    final noDiaAs09 = DateTime(
      proximaMenstruacao.year,
      proximaMenstruacao.month,
      proximaMenstruacao.day,
      9,
      0,
    );
    if (noDiaAs09.isAfter(hoje)) {
      await _scheduleNotification(
        3,
        'Lembrete do Ciclo',
        ' ela veio?',
        noDiaAs09,
      );
    }

    // Atraso de 3 dias √†s 09:00
    final atraso3Dias = proximaMenstruacao.add(const Duration(days: 3));
    final atraso3DiasAs09 = DateTime(
      atraso3Dias.year,
      atraso3Dias.month,
      atraso3Dias.day,
      9,
      0,
    );
    if (atraso3DiasAs09.isAfter(hoje)) {
      await _scheduleNotification(
        6,
        'Atraso menstrual',
        'oii, diva, sua menstrua√ß√£o est√° atrasada 3 dias ‚Äî √© normal; se tiver d√∫vidas, procure orienta√ß√£o.',
        atraso3DiasAs09,
      );
    }
  }

  /// Programa uma notifica√ß√£o espec√≠fica
  Future<void> _scheduleNotification(int id, String title, String body, DateTime scheduledDate) async {
    // No Windows, apenas mostrar no console
    if (Platform.isWindows) {
      debugPrint('üîî NOTIFICA√á√ÉO PROGRAMADA: $title - $body (para: $scheduledDate)');
      return;
    }

    final androidDetails = AndroidNotificationDetails(
      'period_channel',
      'Per√≠odo',
      channelDescription: 'Notifica√ß√µes de ciclo menstrual',
      importance: Importance.max,
      priority: Priority.high,
      playSound: true,
    );

    final platformDetails = NotificationDetails(android: androidDetails);

    try {
      await _plugin.zonedSchedule(
        id,
        title,
        body,
        _convertToTZDateTime(scheduledDate),
        platformDetails,
        androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
      );
      debugPrint('Notifica√ß√£o programada para: $scheduledDate');
    } catch (e) {
      debugPrint('Erro ao programar notifica√ß√£o: $e');
    }
  }

  /// Converte DateTime para TZDateTime
  tz.TZDateTime _convertToTZDateTime(DateTime dateTime) {
    final location = tz.getLocation('America/Sao_Paulo');
    return tz.TZDateTime.from(dateTime, location);
  }

  /// M√©todo de conveni√™ncia: inicializa + calcula + programa notifica√ß√µes.
  Future<void> atualizarUltimaMenstruacao(DateTime dataUltimaMenstruacao,
      {int cicloDias = 28}) async {
    await initNotifications();
    
    // Mostrar notifica√ß√£o imediata quando adicionar menstrua√ß√£o
    final daysLeft =
        calcularDiasParaProximaMenstruacao(dataUltimaMenstruacao, cicloDias: cicloDias);
    
    // Notifica√ß√£o imediata personalizada
    if (daysLeft > 0) {
      await showImmediateNotification(
        '‚úÖ Menstrua√ß√£o Registrada!',
        'Pr√≥ximo ciclo em $daysLeft dias. Te lembro 1 dia antes √†s 18:00.',
      );
    } else {
      await showImmediateNotification(
        '‚úÖ Menstrua√ß√£o Registrada!',
        'Hoje √© o dia. Ela veio?',
      );
    }
    
    // Programar notifica√ß√µes futuras
    await scheduleNotifications(dataUltimaMenstruacao, cicloDias: cicloDias);
  }

  /// Testa notifica√ß√£o manualmente (para desenvolvimento)
  Future<void> testNotification() async {
    await initNotifications();
    await showImmediateNotification(
      'üß™ Teste de Notifica√ß√£o',
      'Sistema de notifica√ß√µes funcionando perfeitamente!',
    );
  }

  /// Mostra notifica√ß√£o imediata personalizada para registro de menstrua√ß√£o
  Future<void> showImmediateNotification(String title, String body) async {
    // No Windows, mostrar no console
    if (Platform.isWindows) {
      debugPrint('üîî NOTIFICA√á√ÉO IMEDIATA: $title - $body');
      return;
    }

    final androidDetails = AndroidNotificationDetails(
      'period_channel',
      'Per√≠odo',
      channelDescription: 'Notifica√ß√µes de ciclo menstrual',
      importance: Importance.max,
      priority: Priority.high,
      playSound: true,
      enableVibration: true,
      enableLights: true,
      color: const Color.fromARGB(255, 255, 64, 129), // Rosa
    );

    final platformDetails = NotificationDetails(android: androidDetails);

    try {
      await _plugin.show(
        DateTime.now().millisecondsSinceEpoch.remainder(100000), // ID √∫nico
        title,
        body,
        platformDetails,
      );
      debugPrint('‚úÖ Notifica√ß√£o imediata enviada: $title - $body');
    } catch (e) {
      debugPrint('‚ùå Erro ao enviar notifica√ß√£o imediata: $e');
    }
  }
}
